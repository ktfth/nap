#!/usr/bin/env node
const fs = require('fs');
const path = require('path');
const isTTY = process.stdin.isTTY;
const isPipe = !isTTY;
const { Transform } = require('stream');
const args = process.argv.slice(2);
const nap = require('../');
const _argSep = nap.argSep;
const package = require('../package.json');

process.stdin.setEncoding('utf8');

process.stdout.setMaxListeners(100000);

if (isPipe) {
    searchData = nap.searchDataTransform(args);
    process.stdin.pipe(searchData).pipe(process.stdout);
} else if ((!isPipe && (isTTY)) && args.length) {
    let filterDirectory = nap.filterDirectory;

    let filterIsDirectory = nap.filterIsDirectory;

    let filterExclude = nap.filterExclude;

    let excludesMap = nap.excludesMap;

    let renderPipeline = (filePath) => {
        let fileStream = fs.createReadStream(filePath);
        fileStream.setMaxListeners(100000);
        fileStream
          .pipe(nap.traversalSearchDataTransform(args, filePath))
          .pipe(process.stdout);
        return fileStream;
    };

    let singlePipeline = (args, filePath, excludes) => {
        if (excludes === undefined || !excludes.length) {
          renderPipeline(filePath);
        }
    };

    let mulPipeline = (args, filePath, excludes) => {
        if (excludes !== undefined && excludes.length) {
            let revised = [];
            return excludes.map(v => {
                if (revised.indexOf(filePath) === -1 && filePath.indexOf(v[1]) === -1) {
                    renderPipeline(filePath);
                    revised.push(filePath);
                }
                return v;
            });
        }
    };

    let traverse = (access, _cacheDirectories) => {
        if (fs.existsSync(access)) {
            traversalSearch(access, _cacheDirectories);
        }
    };

    let limit = 0;

    let iterateSingleAndMultPipeline = (ags, d, dirs) => {
        let ecs = excludesMap(filterExclude(ags));

        for (let i = 0, l = dirs.length; i < l; i += 1) {
          let file = dirs[i];
          let filePath = path.resolve(d, file.name);

          if (ecs !== undefined && ecs.length) {
              let revised = [];
              let revisedExecutionPipeline = [];
              for (let v of ecs) {
                let isNotExcluded = v.length === 2 && filePath.indexOf(v[1]) === -1;
                let isRevised = revised.indexOf(filePath) === -1;
                let exists = fs.existsSync(filePath);
                if (filePath.indexOf(v[1]) > -1 && revisedExecutionPipeline.indexOf(filePath) > -1) {
                  revisedExecutionPipeline.splice(revisedExecutionPipeline.indexOf(filePath), 1);
                }
                if (isNotExcluded && isRevised && exists) {
                    revisedExecutionPipeline.push(filePath);
                    revised.push(filePath);
                }
              }
              for (let executionFilePath of revisedExecutionPipeline) {
                singlePipeline(ags, executionFilePath, ecs);
                mulPipeline(ags, executionFilePath, ecs);
              }
          } else {
              if (fs.existsSync(filePath)) {
                  singlePipeline(ags, filePath, ecs);
                  mulPipeline(ags, filePath, ecs);
              }
          }
        }
    };

    let iterateTraversalPipeline = (ags, d, dirs) => {
        let ecs = excludesMap(filterExclude(ags));

        for (let i = 0, l = dirs.length; i < l; i += 1) {
            let directory = dirs[i];
            let access = path.resolve(d, directory.name);

            if (ecs !== undefined && ecs.length) {
                let revised = [];
                let latestExcluded = [];
                let revisedExecutionPipeline = [];
                for (let v of ecs) {
                  let isNotExcluded = v.length === 2 && access.indexOf(v[1]) === -1;
                  if (access.indexOf(v[1]) > -1 && revisedExecutionPipeline.indexOf(access) > -1) {
                    revisedExecutionPipeline.splice(revisedExecutionPipeline.indexOf(access), 1);
                  }
                  if (isNotExcluded && latestExcluded.length === 0 && revised.indexOf(access) === -1 && fs.existsSync(access)) {
                      revisedExecutionPipeline.push(access);
                      revised.push(access);
                  }
                }
                for (let executionAccess of revisedExecutionPipeline) {
                  traverse(executionAccess, dirs);
                  limit += 1;
                }
            } else {
                if (fs.existsSync(access)) {
                    traverse(access, dirs);
                    limit += 1;
                }
            }
        }
    };

    // searchData = nap.searchDataTransform(args);
    let traversalSearch = (dir, dirs=[]) => {
        let directory = fs.readdirSync(dir, {
            withFileTypes: true
        });
        let _cacheDirectory = [];
        let _cacheDirectories = dirs;
        if (directory) {
            _cacheDirectory = filterDirectory(directory);
            _cacheDirectories = filterIsDirectory(directory);

            if (limit < 10000) {
                iterateSingleAndMultPipeline(args, dir, _cacheDirectory);

                if (args.indexOf(nap.niceFlag) === -1) {
                    iterateTraversalPipeline(args, dir, _cacheDirectories);
                }
            }
        }
    };
    traversalSearch(process.cwd());
} else {
    console.log(package.name + ':', package.version, '\n');
    console.log('default behavior: ', 'count presence of any term ' +
                'present as argument\n');
    console.log('--extract', ' - ', 'Show content as output founded by term');
    console.log('--exclude', ' - ', 'Receive an value to act like the ' +
                'definition of parameter');
    console.log('--html', ' - ', 'Extract content by query selection');
    console.log('--re', ' - ', 'Accept regular expression, combined');
    console.log('--rev', ' - ', 'Reverse the output');
}
