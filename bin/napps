#!/usr/bin/env node
const fs = require('fs');
const path = require('path');
const isTTY = process.stdin.isTTY;
const isPipe = !isTTY;
const { Transform } = require('stream');
const args = process.argv.slice(2);
const nap = require('../');
let searchData = null;

process.stdin.setEncoding('utf8');

process.stdout.setMaxListeners(10000);

if (isPipe) {
    searchData = nap.searchDataTransform(args);
    process.stdin.pipe(searchData).pipe(process.stdout);
    process.stdin.resume();
} else if ((!isPipe && (isTTY)) && args.length) {
    let filterDirectory = directory => {
      return directory.filter(dirent => {
          return dirent.isFile() && !(dirent.name.indexOf('.') === 0);
      });
    };

    let filterIsDirectory = directory => {
        return directory.filter(dirent => {
            return dirent.isDirectory() && !(dirent.name.indexOf('.') === 0);
        });
    };

    let filterExclude = args => {
      return args.filter(v => {
          if (v.indexOf(nap.excludeFlag) > -1) {
            return v;
          }
      });
    };
    // searchData = nap.searchDataTransform(args);
    let traversalSearch = (dir, dirs=[]) => {
        let limit = 0;
        let directory = fs.readdirSync(dir, {
            withFileTypes: true
        });
        let _cacheDirectory = [];
        let _cacheDirectories = dirs;
        if (directory) {
            _cacheDirectory = filterDirectory(directory);

            _cacheDirectories = filterIsDirectory(directory);

            for (let i = 0, l = _cacheDirectory.length; i < l; i += 1) {
              let file = _cacheDirectory[i];
              let filePath = path.resolve(dir, file.name);
              let excludes = filterExclude(args);

              excludes = excludes.map(v => v.split('='));

              if (!excludes.length) {
                fs.createReadStream(filePath)
                  .pipe(nap.traversalSearchDataTransform(args, filePath))
                  .pipe(process.stdout);
              }

              excludes.map(v => {
                  if (filePath.indexOf(v[1]) === -1) {
                    fs.createReadStream(filePath)
                      .pipe(nap.traversalSearchDataTransform(args, filePath))
                      .pipe(process.stdout);
                  }
              });
            }

            if (limit < 10) {
                for (let i = 0, l = _cacheDirectories.length; i < l; i += 1) {
                    let directory = _cacheDirectories[i];
                    let access = path.resolve(dir, directory.name);
                    if (fs.existsSync(access)) {
                        traversalSearch(access, _cacheDirectories);
                    }

                    limit += 1;
                }
            }
        }
    };
    traversalSearch(process.cwd());
}
