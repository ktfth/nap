#!/usr/bin/env node
const fs = require('fs');
const path = require('path');
const isTTY = process.stdin.isTTY;
const isPipe = !isTTY;
const { Transform } = require('stream');
const args = process.argv.slice(2);
const nap = require('../');
let searchData = null;

if (isPipe) {
    searchData = nap.searchDataTransform(args);
    process.stdin.pipe(searchData).pipe(process.stdout);
    process.stdin.resume();
} else if ((!isPipe && (isTTY)) && args.length) {
    searchData = nap.searchDataTransform(args);
    let traversalSearch = dir => {
        let directory = fs.readdirSync(dir, {
            withFileTypes: true
        });
        let _cacheDirectory = [];
        if (directory) {
            // directory.filter(dirent => {
            //     return dirent.isDirectory() && !(dirent.name.indexOf('.') === 0);
            // }).map(directory => {
            //   let access = path.resolve(dir, directory.name);
            //   return traversalSearch(access);
            // });
            _cacheDirectory = directory.filter(dirent => {
                return dirent.isFile();
            });

            for (let i = 0, l = _cacheDirectory.length; i < l; i += 1) {
              let file = _cacheDirectory[i];
              let filePath = path.resolve(process.cwd(), file.name);
              fs.createReadStream(filePath)
                .pipe(searchData)
                .pipe(process.stdout)
            }
        }
    };
    traversalSearch(process.cwd());
}
